// src/pages/WalletTracker.js
import React, { useState, useEffect } from 'react';
import './WalletTracker.css';

const WalletTracker = () => {
  // State for wallet input and list.
  const [walletInput, setWalletInput] = useState('');
  const [wallets, setWallets] = useState(() => {
    const saved = localStorage.getItem('trackedWallets');
    return saved ? JSON.parse(saved) : [];
  });

  // State for tracker data from the wallet tracker endpoint.
  // Expect keys: hot_buys, new_hot_buys, new_transfers.
  const [trackerData, setTrackerData] = useState({
    hot_buys: {},
    new_hot_buys: {},
    new_transfers: {}
  });

  // State for wallet overview metrics from the wallet overview endpoint.
  // Format: { walletAddress: { "7d PnL": ..., "7d Volume": ... } }
  const [overviewMetrics, setOverviewMetrics] = useState({});

  // Accumulated transactions for each wallet (persist across refreshes).
  // Format: { walletAddress: [transaction, ...] }
  const [allTransactions, setAllTransactions] = useState(() => {
    const saved = localStorage.getItem('allTransactions');
    return saved ? JSON.parse(saved) : {};
  });

  // Save wallet list and transactions to localStorage when they change.
  useEffect(() => {
    localStorage.setItem('trackedWallets', JSON.stringify(wallets));
  }, [wallets]);

  useEffect(() => {
    localStorage.setItem('allTransactions', JSON.stringify(allTransactions));
  }, [allTransactions]);

  // Poll the wallet tracker endpoint every 20 seconds.
  useEffect(() => {
    const intervalId = setInterval(() => {
      fetch('http://localhost:5000/api/wallet-tracker')
        .then(res => res.json())
        .then(data => {
          setTrackerData(data);
          setAllTransactions(prev => {
            // Build new state only for currently tracked wallets.
            const updated = {};
            wallets.forEach(wallet => {
              if (prev[wallet]) {
                updated[wallet] = prev[wallet];
              }
            });
            if (data.new_transfers) {
              Object.entries(data.new_transfers).forEach(([wallet, newTxs]) => {
                if (wallets.includes(wallet)) {
                  if (!updated[wallet]) {
                    updated[wallet] = newTxs;
                  } else {
                    const existingIds = new Set(updated[wallet].map(tx => tx.transaction_id));
                    newTxs.forEach(tx => {
                      if (!existingIds.has(tx.transaction_id)) {
                        updated[wallet].push(tx);
                      }
                    });
                  }
                  // Sort transactions by block_time descending (newest first)
                  updated[wallet].sort((a, b) => b.block_time - a.block_time);
                }
              });
            }
            return updated;
          });
        })
        .catch(err => console.error('Error fetching wallet tracker data:', err));
    }, 20000);
    return () => clearInterval(intervalId);
  }, [wallets]);

  // Poll the wallet overview endpoint every 5 minutes.
  useEffect(() => {
    const intervalId = setInterval(() => {
      fetch('http://localhost:5000/api/wallet-overview')
        .then(res => res.json())
        .then(data => {
          setOverviewMetrics(data);
        })
        .catch(err => console.error('Error fetching wallet overview data:', err));
    }, 300000);
    // Also fetch immediately on mount:
    fetch('http://localhost:5000/api/wallet-overview')
      .then(res => res.json())
      .then(data => setOverviewMetrics(data))
      .catch(err => console.error('Error fetching wallet overview data:', err));
    return () => clearInterval(intervalId);
  }, []);

  // Function to update the backend with the current wallet list.
  const updateWalletsOnBackend = (updatedWallets) => {
    fetch('http://localhost:5000/api/update-wallets', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ wallets: updatedWallets })
    })
      .then(response => response.json())
      .then(data => console.log('Backend wallet tracker updated:', data))
      .catch(err => console.error('Error updating wallets:', err));
  };

  // Handler to add a wallet (max 10) and immediately update the backend.
  const handleAddWallet = () => {
    if (walletInput && wallets.length < 10) {
      const newWallet = walletInput.trim();
      const updatedWallets = [...wallets, newWallet];
      setWallets(updatedWallets);
      setWalletInput('');
      updateWalletsOnBackend(updatedWallets);
    }
  };

  // Handler to remove a wallet and update the backend.
  const handleRemoveWallet = (walletToRemove) => {
    const updatedWallets = wallets.filter(wallet => wallet !== walletToRemove);
    setWallets(updatedWallets);
    setAllTransactions(prev => {
      const updated = { ...prev };
      delete updated[walletToRemove];
      return updated;
    });
    updateWalletsOnBackend(updatedWallets);
  };

  return (
    <div className="dashboard-container">
      {/* Left Panel: Wallet Management Table */}
      <div className="left-panel">
        <h2>Wallet Manager</h2>
        <div className="wallet-input">
          <input
            type="text"
            placeholder="Enter wallet address"
            value={walletInput}
            onChange={(e) => setWalletInput(e.target.value)}
          />
          <button onClick={handleAddWallet}>Add</button>
        </div>
        <table className="wallet-table">
          <thead>
          <tr>
            <th>Address</th>
            <th>7D PnL</th>
            <th>7D Volume</th>
            <th>Remove</th>
          </tr>
          </thead>
          <tbody>
          {wallets.map((wallet, idx) => (
              <tr key={idx}>
                <td>{wallet}</td>
                <td
                    className={
                      overviewMetrics[wallet] &&
                      overviewMetrics[wallet]["7d PnL"] &&
                      overviewMetrics[wallet]["7d PnL"].trim().startsWith("+")
                          ? "green-text"
                          : "green-text"
                    }
                >
                  {overviewMetrics[wallet] && overviewMetrics[wallet]["7d PnL"]
                      ? overviewMetrics[wallet]["7d PnL"]
                      : 'N/A'}
                </td>
                <td>
                  {overviewMetrics[wallet] &&
                  overviewMetrics[wallet]["7d Volume"]
                      ? overviewMetrics[wallet]["7d Volume"]
                      : 'N/A'}
                </td>
                <td>
                  <button onClick={() => handleRemoveWallet(wallet)}>Remove</button>
                </td>
              </tr>
          ))}
          </tbody>

        </table>
      </div>

      {/* Right Panel: Tracker Data Display */}
      <div className="right-panel">
        <div className="top-box">
          <h3>Recent Transactions</h3>
          {Object.keys(allTransactions).length === 0 ? (
              <p>No recent transactions.</p>
          ) : (
              Object.entries(allTransactions).map(([wallet, transactions]) => (
                  <div key={wallet} className="wallet-section">
                    <h4>Wallet: {wallet}</h4>
                    <ul>
                      {transactions.map((tx, idx) => (
                          <li key={idx}>
                            <strong>Token:</strong> {tx.token_address} |{' '}
                            <strong>Amount:</strong> {tx.amount} |{' '}
                            <strong>Age:</strong> {tx.age}
                          </li>
                  ))}
                </ul>
              </div>
            ))
          )}
        </div>
        <div className="bottom-box">
          <h3>Popular Coins</h3>
          {trackerData && trackerData.hot_buys && Object.keys(trackerData.hot_buys).length > 0 ? (
            <ul>
              {Object.entries(trackerData.hot_buys).map(([token, count]) => (
                <li key={token}>
                  <strong>Token:</strong> {token} | <strong>Wallets:</strong> {count}
                </li>
              ))}
            </ul>
          ) : (
            <p>No popular coins.</p>
          )}
        </div>
      </div>
    </div>
  );
};

export default WalletTracker;
